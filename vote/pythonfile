pipeline{
    agent none

    stages{
        stage('build'){
            when{
              changeset "**/vote/**"
            }
            steps{
                echo 'Compiling application'
                dir('vote'){
                  sh 'pip install -r requirements.txt'
                }
            }
        }
        stage('test'){
            when{
            changeset "**/vote**"
            }
            steps{
                echo 'test vote application'
                dir('vote'){
                  sh 'nosetests -v'
                }

            }
        }
        stage('package'){
            agent any
            when{
              changeset "**/worker/**"
              branch 'master'
            }
            steps{
                echo 'package worker application with docker'
                script{
                  docker.WithRegustry('https://index.docker.io/v1/', 'dockerlogin'){
                     def workerImage = docker.build("seyibright/vote:v${env.BUILD_ID}", "./vote")
                     workerImage.push()
                     workerImage.push("${env.BRANCH_NAME}")
                  }
                }
            }
        }
    post{
      always{

         echo 'Build pipeline application for vote done, try again for update'

      }
      failure{
        slackSend (channel: "jenkin-pipeline", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
      success{
        slackSend (channel: "jenkin-pipeline", message: "Build Successful - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
      }
    }
  }
 }
